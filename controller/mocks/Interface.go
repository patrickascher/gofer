// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	controller "github.com/patrickascher/gofer/controller"
	context "github.com/patrickascher/gofer/controller/context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Action provides a mock function with given fields:
func (_m *Interface) Action() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CallAction provides a mock function with given fields: action
func (_m *Interface) CallAction(action string) (func(), error) {
	ret := _m.Called(action)

	var r0 func()
	if rf, ok := ret.Get(0).(func(string) func()); ok {
		r0 = rf(action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBrowserCancellation provides a mock function with given fields:
func (_m *Interface) CheckBrowserCancellation() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *Interface) Context() *context.Context {
	ret := _m.Called()

	var r0 *context.Context
	if rf, ok := ret.Get(0).(func() *context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*context.Context)
		}
	}

	return r0
}

// Error provides a mock function with given fields: status, err
func (_m *Interface) Error(status int, err error) {
	_m.Called(status, err)
}

// HasError provides a mock function with given fields:
func (_m *Interface) HasError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Initialize provides a mock function with given fields: caller
func (_m *Interface) Initialize(caller controller.Interface) {
	_m.Called(caller)
}

// Name provides a mock function with given fields:
func (_m *Interface) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Redirect provides a mock function with given fields: status, url
func (_m *Interface) Redirect(status int, url string) {
	_m.Called(status, url)
}

// RenderType provides a mock function with given fields:
func (_m *Interface) RenderType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *Interface) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Set provides a mock function with given fields: key, value
func (_m *Interface) Set(key string, value interface{}) {
	_m.Called(key, value)
}

// SetContext provides a mock function with given fields: ctx
func (_m *Interface) SetContext(ctx *context.Context) {
	_m.Called(ctx)
}

// SetRenderType provides a mock function with given fields: _a0
func (_m *Interface) SetRenderType(_a0 string) {
	_m.Called(_a0)
}

// T provides a mock function with given fields: _a0, _a1
func (_m *Interface) T(_a0 string, _a1 ...map[string]interface{}) string {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...map[string]interface{}) string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TP provides a mock function with given fields: _a0, _a1, _a2
func (_m *Interface) TP(_a0 string, _a1 int, _a2 ...map[string]interface{}) string {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int, ...map[string]interface{}) string); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
